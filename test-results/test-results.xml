<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="6" time="8.366" timestamp="2023-06-12T05:26:51.765626" hostname="george"><testcase classname="test.test_train" name="test_label_distribution" time="0.013" /><testcase classname="test.test_train" name="test_preprocessing" time="0.225" /><testcase classname="test.test_train" name="test_data_slice" time="0.282" /><testcase classname="test.test_train" name="test_nondeterminism_robustness" time="0.381" /><testcase classname="test.test_train" name="test_inference_performance" time="0.269" /><testcase classname="test.test_train" name="test_mutamorphic_synonym" time="0.704"><failure message="AssertionError: assert 0.022222222222222143 &lt;= 0&#10; +  where 0.022222222222222143 = &lt;ufunc 'absolute'&gt;((0.6722222222222223 - 0.6944444444444444))&#10; +    where &lt;ufunc 'absolute'&gt; = np.abs">df =                                                 Review  Liked
0                             Wow... Loved this place.  ...nd rude to a loyal patron!      0
899                       Overall, a great experience.      1

[900 rows x 2 columns]

    def test_mutamorphic_synonym(df):
        """
        Mutamorphic test that ensures that replacing a sentiment-associated word with a synonym does not change performance greatly
        """
        corpus, dataset = src.pre_process.pre_process(df)
        new_corpus = []
        for i in range(len(corpus)):
            # Get words
            words = corpus[i].split(" ")
            # 10% of words
            selected_words = random.sample(list(enumerate(words)), len(words) // 5)
            for j in range(len(selected_words)):
                idx, sel_word = selected_words[j]
                syns = extract_synonyms(sel_word)
                syn = random.choice(syns) if syns else sel_word
                words[idx] = syn
            new_corpus.append(" ".join(words))
    
        X, y, _ = data_transform(corpus, dataset)
        Xn, yn, _ = data_transform(new_corpus, dataset)
        accs = []
        seed = 1
        for X, y in [(X, y), (Xn, yn)]:
            X_test, y_test, classifier = train(X, y, seed, seed)
            acc = evaluation(classifier, X_test, y_test)
            accs.append(acc)
&gt;       assert np.abs(accs[0] - accs[1]) &lt;= 0
E       AssertionError: assert 0.022222222222222143 &lt;= 0
E        +  where 0.022222222222222143 = &lt;ufunc 'absolute'&gt;((0.6722222222222223 - 0.6944444444444444))
E        +    where &lt;ufunc 'absolute'&gt; = np.abs

test\test_train.py:123: AssertionError</failure></testcase></testsuite></testsuites>