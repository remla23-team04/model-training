# pipeline.yml
name: Pipeline
on: [push, pull_request]
jobs:
  #### BUILD
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Cache so we can use the artifacts in other jobs (faster boy)
      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('build') }}
          restore-keys: |
            ${{ runner.os }}-build-

  #### CHECK
  check:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Use cached build artifacts
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Restore build artifacts
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('build') }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Actual stuff from this job
      - name: Run Pylint
        run: |
          pylint --fail-under=5.8 ./src
      - name: Run Dslinter
        run: |
          pylint --fail-under=5.8 --load-plugins=dslinter --output-format=text:report.txt ./src
      - name: Run Mllint
        run: |
          mllint -o report.md

      ## Report
      - name: Upload dslinter report
        uses: actions/upload-artifact@v2
        with:
          name: dslinter-report
          path: report.txt
      - name: Upload Mllint report
        uses: actions/upload-artifact@v2
        with:
          name: mllint-report
          path: report.md

  #### TEST
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Use cached build artifacts
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Restore build artifacts
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-${{ hashFiles('build') }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Actual stuff from this job
      - name: Run tests and coverage
        run: |
          coverage run -m pytest

      - name: Get md test report and append to README
        run: |
          pytest --md-report --md-report-verbose=1 --md-report-color never --md-report-output=test-results/test-results.md
          cat README.md test-results/test-results.md > README-new.md
          cp README-new.md README.md
          rm README-new.md

      - name: Comment on pull request
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.ORG_GH_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test-results/test-results.md', 'utf8');
            const eventContext = github.context;
            if (eventContext === undefined) {
              return;
            }
            const pullRequest = eventContext.payload.pull_request;
            const issueComment = eventContext.issue({ body: report });
            return github.issues.createComment(issueComment);

      ## Report
      - name: Generate coverage report
        run: |
          coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: htmlcov
      - name: Coveralls
        uses: coverallsapp/github-action@v2

  #### DEPLOY
  deploy:
    needs: [check, test]
    runs-on: ubuntu-latest
    if: startsWith(github.event_name, 'release') && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      - name: Registry Login (ghcr.io)
        run: echo "${{ secrets.ORG_GH_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Build and Push Docker Image
        run: |
          IMG=ghcr.io/${{ github.repository }}
          # Make lowercase
          IMG=${IMG,,}
          docker build \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            .
          docker push --all-tags $IMG
