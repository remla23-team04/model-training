# release.yml
name: Release
on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up Python
        uses: actions/setup-python@v2
        with:
          python_version:
      - name: Parse version info from tag
        run: |
          # GITHUB_REF is like refs/tags/v2.3.5, so strip the first 11 chars
          VERSION=${GITHUB_REF:11}
          MAJOR=`echo "$VERSION" | cut -d . -f 1`
          MINOR=`echo "$VERSION" | cut -d . -f 2`
          PATCH=`echo "$VERSION" | cut -d . -f 3`
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV
      - name: Registry Login (ghcr.io)
        run: echo "${{ secrets.ORG_GH_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Build and Push Docker Image
        run: |
          IMG=ghcr.io/${{ github.repository }}
          # Make lowercase
          IMG=${IMG,,}
          docker build \
            --tag $IMG:${{ env.version }} \
            --tag $IMG:${{ env.version_major }}.${{ env.version_minor }}.latest \
            --tag $IMG:${{ env.version_major }}.latest \
            --tag $IMG:latest \
            .
          docker push --all-tags $IMG
      # - name: commit and push
      #   run: |
      #     VERSION="${{ github.event.release.tag_name }}"
      #     VERSION="${VERSION:1}"ÃŸ
      #     git config user.email "action@github.com"
      #     git config user.name "GitHub Action"
      #     git commit -am "Update package.json version to $VERSION"
      #     git push origin HEAD:main
